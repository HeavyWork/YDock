<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ydock="clr-namespace:YDock"
                    xmlns:view="clr-namespace:YDock.View"
                    xmlns:enum="clr-namespace:YDock.Enum"
                    xmlns:converters="clr-namespace:YDock.Converters"
                    xmlns:command="clr-namespace:YDock.Commands"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:Global="clr-namespace:YDock.Global">
    <enum:DockSide x:Key="Top">Top</enum:DockSide>
    <enum:DockSide x:Key="Right">Right</enum:DockSide>

    <converters:NullToDoNothingConverter x:Key="NullToDoNothingConverter"/>
    <converters:SideToAngleConverter x:Key="SideToAngleConverter"/>
    <converters:DockModeToTransformConverter x:Key="DockModeToTransformConverter"/>
    <converters:DockModeToVisibilityConverter x:Key="DockModeToVisibilityConverter"/>
    <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>

    <SolidColorBrush x:Key="WindowBackground" Color="#FFEEEEF2"/>
    <SolidColorBrush x:Key="MouseOnBackground" Color="#FF1C97EA"/>
    <SolidColorBrush x:Key="SelectedBackground" Color="#FFD4D4D4"/>
    <SolidColorBrush x:Key="BorderBrush" Color="#FFCCCEDB"/>
    <SolidColorBrush x:Key="WindowBorderBrush" Color="#FF9B9FB9"/>
    <SolidColorBrush x:Key="ActiveHeaderBackground" Color="#FF007ACC"/>
    <SolidColorBrush x:Key="DisActiveHeaderBackground" Color="#FFEEEEF2"/>
    <SolidColorBrush x:Key="AnchorPanelBackground" Color="#FFEEEEF2"/>
    <SolidColorBrush x:Key="ActivePanelItemBackground" Color="#FFC9DEF5"/>

    <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Background" Value="{StaticResource DisActiveHeaderBackground}"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="24"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="White"/>
                <Setter Property="Foreground" Value="{StaticResource ActiveHeaderBackground}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="{StaticResource ActiveHeaderBackground}"/>
                    <Setter Property="Foreground" Value="White"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Window_Close" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid SnapsToDevicePixels="True" Background="{TemplateBinding Background}" ToolTip="{Global:Resource Key=Close}">
                        <Path VerticalAlignment="Center" HorizontalAlignment="Center"
                              Data="M2,1 L6,5 L10,1 L11,2 L7,6 L11,10 L10,11 L6,7 L2,11 L1,10 L5,6 L1,2 Z"
                              Width="12" Height="12" UseLayoutRounding="True"
                              Fill="{TemplateBinding Foreground}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Window_Restore" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid SnapsToDevicePixels="True" ToolTip="{Global:Resource Key=Restore}" Background="{TemplateBinding Background}">
                        <Path VerticalAlignment="Center" HorizontalAlignment="Center"
                              Data="M1,5 L1,11 L8,11 L8,5 Z M4,2 L4,3 L9,3 L9,8 L11,8 L11,2 Z M3,0 L12,0 L12,9 L9,9 L9,12 L0,12 L0,3 L3,3 Z"
                              Width="12" Height="12" UseLayoutRounding="True"
                              Fill="{TemplateBinding Foreground}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Window_Maximize" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid SnapsToDevicePixels="True" ToolTip="{Global:Resource Key=Maximize}" Background="{TemplateBinding Background}">
                        <Path VerticalAlignment="Center" HorizontalAlignment="Center"
                              Data="M1,4 L1,11 L11,11 L11,4 Z M0,1 L12,1 L12,12 L0,12 Z"
                              Width="12" Height="12" UseLayoutRounding="True"
                              Fill="{TemplateBinding Foreground}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Window_Minimize" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid SnapsToDevicePixels="True" ToolTip="{Global:Resource Key=Minimize}" Background="{TemplateBinding Background}">
                        <Path VerticalAlignment="Center" HorizontalAlignment="Center"
                              Data="M0,5 L12,5 L12,7 L0,7 Z"
                              Width="12" Height="12" UseLayoutRounding="True"
                              Fill="{TemplateBinding Foreground}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Header_Close" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border SnapsToDevicePixels="True" ToolTip="{Global:Resource Key=Close}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <Path VerticalAlignment="Center" HorizontalAlignment="Center"
                              Data="M2,1 L6,5 L10,1 L11,2 L7,6 L11,10 L10,11 L6,7 L2,11 L1,10 L5,6 L1,2 Z"
                              Width="12" Height="12" UseLayoutRounding="True"
                              Fill="{TemplateBinding Foreground}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type view:DragTabItem}},Path=IsSelected}" Value="True"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type view:DragTabItem}},Path=Content.IsActive}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Foreground" Value="Black"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FF52B0EF"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="#FF0E6198"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent},Path=IsSelected}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Content.IsActive}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#FFE6E7ED"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent},Path=IsSelected}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsPressed}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Content.IsActive}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#FFB7B9C5"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="CustomToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="18"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Path Data="M0,0 L8,0 L4,4 Z" VerticalAlignment="Center" HorizontalAlignment="Center" Fill="{TemplateBinding Foreground}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Header_TB_Style" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CustomToggleButtonStyle}">
        <Setter Property="Foreground" Value="Black"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFF7F7F9"/>
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.IsActive}" Value="True">
                <Setter Property="Foreground" Value="White"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.IsActive}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#FF52B0EF"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="#FFB7B9C5"/>
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsChecked}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.IsActive}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#FF0E6198"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DocumentToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CustomToggleButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFC9DEF5"/>
                <Setter Property="Foreground" Value="#FF007ACC"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource ActiveHeaderBackground}"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Anchor_Btn" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Width" Value="18"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFF7F7F9"/>
            </Trigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.IsActive}" Value="False">
                <Setter Property="Foreground" Value="Black"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsMouseOver}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.IsActive}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background" Value="#FF52B0EF"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="IsPressed" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Background" Value="#FF0E6198"/>
                    <Setter Property="Foreground" Value="White"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Anchor_Close" TargetType="{x:Type Button}" BasedOn="{StaticResource Anchor_Btn}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border SnapsToDevicePixels="True" ToolTip="{Global:Resource Key=Close}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <Path VerticalAlignment="Center" HorizontalAlignment="Center" SnapsToDevicePixels="True"
                              Data="M2,1 L6,5 L10,1 L11,2 L7,6 L11,10 L10,11 L6,7 L2,11 L1,10 L5,6 L1,2 Z"
                              Width="12" Height="12" UseLayoutRounding="True"
                              Fill="{TemplateBinding Foreground}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Anchor_AutoHide" TargetType="{x:Type Button}" BasedOn="{StaticResource Anchor_Btn}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border SnapsToDevicePixels="True" ToolTip="{Global:Resource Key=_AutoHide}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <Path VerticalAlignment="Center" HorizontalAlignment="Center" SnapsToDevicePixels="True"
                              Data="M3,0 L9,0 L9,6 L10,6 L10,7 L6.5,7 L6.5,11 L5.5,11 L5.5,7 L2,7 L2,6 L3,6 Z M4,1 L6,1 L6,6 L4,6 Z"
                              Width="12" Height="12" UseLayoutRounding="True"
                              Fill="{TemplateBinding Foreground}"
                              LayoutTransform="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type view:AnchorHeaderControl}},Path=DataContext.Mode,Converter={StaticResource DockModeToTransformConverter}}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Anchor_Maximize" TargetType="{x:Type Button}" BasedOn="{StaticResource Anchor_Btn}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border SnapsToDevicePixels="True" ToolTip="{Global:Resource Key=Maximize}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <Path VerticalAlignment="Center" HorizontalAlignment="Center"
                              Data="M1,4 L1,11 L11,11 L11,4 Z M0,1 L12,1 L12,12 L0,12 Z"
                              Width="12" Height="12" UseLayoutRounding="True"
                              Fill="{TemplateBinding Foreground}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Anchor_Restore" TargetType="{x:Type Button}" BasedOn="{StaticResource Anchor_Btn}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border SnapsToDevicePixels="True" ToolTip="{Global:Resource Key=Restore}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <Path VerticalAlignment="Center" HorizontalAlignment="Center"
                              Data="M1,5 L1,11 L8,11 L8,5 Z M4,2 L4,3 L9,3 L9,8 L11,8 L11,2 Z M3,0 L12,0 L12,9 L9,9 L9,12 L0,12 L0,3 L3,3 Z"
                              Width="12" Height="12" UseLayoutRounding="True"
                              Fill="{TemplateBinding Foreground}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="view:TransitioningContentControl">
        <Setter Property="IsTabStop"
                Value="False" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="view:TransitioningContentControl">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="2">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="PresentationStates">
                                <VisualState x:Name="DefaultTransition">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="CurrentContentPresentationSite"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                                  Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.400"
                                                                  Value="1" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimation BeginTime="00:00:00"
                                                         Duration="00:00:00.500"
                                                         Storyboard.TargetName="CurrentContentPresentationSite"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
                                                         From="50"
                                                         To="0">
                                            <DoubleAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>

                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="PreviousContentPresentationSite"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                                  Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.100"
                                                                  Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="PreviousContentPresentationSite"
                                                                       Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Collapsed</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="UpTransition">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="CurrentContentPresentationSite"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                                  Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300"
                                                                  Value="1" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="CurrentContentPresentationSite"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                                  Value="30" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300"
                                                                  Value="0" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="PreviousContentPresentationSite"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                                  Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300"
                                                                  Value="0" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="PreviousContentPresentationSite"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                                  Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300"
                                                                  Value="-30" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="DownTransition">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="CurrentContentPresentationSite"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                                  Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300"
                                                                  Value="1" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="CurrentContentPresentationSite"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                                  Value="-40" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300"
                                                                  Value="0" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="PreviousContentPresentationSite"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                                  Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300"
                                                                  Value="0" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="PreviousContentPresentationSite"
                                                                       Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.Y)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                                  Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.300"
                                                                  Value="40" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="ScaleTransition">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="CurrentContentPresentationSite"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                                  Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.200"
                                                                  Value="1" />
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimation BeginTime="00:00:00"
                                                         Duration="00:00:00.300"
                                                         Storyboard.TargetName="CurrentContentPresentationSite"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                                         From="0.6"
                                                         To="1">
                                            <DoubleAnimation.EasingFunction>
                                                <QuarticEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>

                                        <DoubleAnimation BeginTime="00:00:00"
                                                         Duration="00:00:00.300"
                                                         Storyboard.TargetName="CurrentContentPresentationSite"
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                                         From="0.6"
                                                         To="1">
                                            <DoubleAnimation.EasingFunction>
                                                <QuarticEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>

                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00"
                                                                       Storyboard.TargetName="PreviousContentPresentationSite"
                                                                       Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00"
                                                                  Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.200"
                                                                  Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid>
                            <ContentPresenter x:Name="PreviousContentPresentationSite"
                                              Content="{x:Null}" RenderTransformOrigin="0.5, 0.5"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </ContentPresenter.RenderTransform>
                            </ContentPresenter>

                            <ContentPresenter x:Name="CurrentContentPresentationSite"
                                              Content="{x:Null}" RenderTransformOrigin="0.5, 0.5"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <ContentPresenter.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform />
                                        <RotateTransform />
                                        <TranslateTransform />
                                    </TransformGroup>
                                </ContentPresenter.RenderTransform>
                            </ContentPresenter>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type view:LayoutDragSplitter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type view:LayoutDragSplitter}">
                    <Rectangle SnapsToDevicePixels="True" Fill="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LayoutHeaderControlStyle" TargetType="{x:Type view:AnchorHeaderControl}">
        <Setter Property="Background" Value="{StaticResource DisActiveHeaderBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type view:AnchorHeaderControl}">
                    <Border SnapsToDevicePixels="True" UseLayoutRounding="True"
                        Background="{TemplateBinding Background}" Padding="3.5">
                        <Grid SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock x:Name="HeaderTextBlock" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" Text="{Binding Title}"/>
                            <view:TexturePanel UseLayoutRounding="True" DataContext="{Binding}" Grid.Column="1" SnapsToDevicePixels="True" Margin="10,0,10,0"/>
                            <StackPanel Grid.Column="2" Orientation="Horizontal" SnapsToDevicePixels="True">
                                <ToggleButton x:Name="PART_DropMenu" ToolTip="{Global:Resource Key=Window_Position}" IsChecked="{Binding RelativeSource={RelativeSource Self},Path=ContextMenu.IsOpen}" IsThreeState="False" Style="{StaticResource Header_TB_Style}"/>
                                <Button x:Name="Maximize" Style="{StaticResource Anchor_Maximize}" Command="{x:Static command:GlobalCommands.MaximizeCommand}" Visibility="{Binding RelativeSource={RelativeSource Self},Path=IsEnabled,Converter={StaticResource BoolToVisibilityConverter}}"/>
                                <Button x:Name="Restore" Style="{StaticResource Anchor_Restore}" Command="{x:Static command:GlobalCommands.RestoreCommand}" Visibility="{Binding RelativeSource={RelativeSource Self},Path=IsEnabled,Converter={StaticResource BoolToVisibilityConverter}}"/>
                                <Button Style="{StaticResource Anchor_AutoHide}" Command="{x:Static command:GlobalCommands.SwitchAutoHideStatusCommand}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DataContext.Mode,Converter={StaticResource DockModeToVisibilityConverter}}"/>
                                <Button Style="{StaticResource Anchor_Close}" Command="{x:Static command:GlobalCommands.HideStatusCommand}"/>
                            </StackPanel>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsActive}" Value="True">
                            <Setter TargetName="HeaderTextBlock" Property="Foreground" Value="White"/>
                            <Setter Property="Background" Value="{StaticResource ActiveHeaderBackground}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type view:LayoutContentControl}">
        <Setter Property="Background" Value="WhiteSmoke"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type view:LayoutContentControl}">
                    <Border UseLayoutRounding="True" SnapsToDevicePixels="true" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <Grid SnapsToDevicePixels="true"
                          KeyboardNavigation.TabNavigation="Local">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <view:AnchorHeaderControl SnapsToDevicePixels="True" DataContext="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Model}" Style="{StaticResource LayoutHeaderControlStyle}"/>
                            <ContentPresenter Grid.Row="1" SnapsToDevicePixels="True" Content="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Model.Content}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style TargetType="{x:Type view:DockBarGroupControl}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type view:DockBarGroupControl}">
                    <Border UseLayoutRounding="True" SnapsToDevicePixels="True" Background="{TemplateBinding Background}">
                        <Border.ContextMenu>
                            <view:OnItemClickMenu ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Model.Children_CanSelect}"/>
                        </Border.ContextMenu>
                        <view:SingelLinePanel SnapsToDevicePixels="True" IsItemsHost="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type view:DockBarItemControl}">
                    <Setter Property="MaxWidth" Value="240"/>
                    <Setter Property="Background" Value="{StaticResource WindowBackground}"/>
                    <Setter Property="Margin" Value="0,0,4,0"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type view:DockBarItemControl}">
                                <Border x:Name="Border" UseLayoutRounding="True" Margin="{TemplateBinding Margin}" SnapsToDevicePixels="True"
                                        Background="{TemplateBinding Background}">
                                    <Grid SnapsToDevicePixels="True">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                            <RowDefinition Height="3"/>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <Rectangle x:Name="Rect" SnapsToDevicePixels="True" Fill="{StaticResource BorderBrush}" Height="6" Grid.Row="2"/>
                                        <TextBlock x:Name="Title" VerticalAlignment="Center" Text="{Binding Path=Title}" TextTrimming="CharacterEllipsis"/>
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter TargetName="Rect" Property="Fill" Value="{StaticResource ActiveHeaderBackground}"/>
                                        <Setter TargetName="Title" Property="Foreground" Value="{StaticResource ActiveHeaderBackground}"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding Side}" Value="{StaticResource Top}">
                                        <Setter TargetName="Rect" Property="Grid.Row" Value="0"/>
                                        <Setter TargetName="Title" Property="Grid.Row" Value="2"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Side}" Value="{StaticResource Right}">
                                        <Setter TargetName="Rect" Property="Grid.Row" Value="0"/>
                                        <Setter TargetName="Title" Property="Grid.Row" Value="2"/>
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="DocumentHeaderTemplate" TargetType="{x:Type view:DragTabItem}">
        <Border Name="Border" SnapsToDevicePixels="True" UseLayoutRounding="True"
                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
            <Grid Margin="4,3,4,2" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Image VerticalAlignment="Center" Height="14" Source="{Binding Path=ImageSource,Converter={StaticResource NullToDoNothingConverter}}" Stretch="Uniform"/>
                <TextBlock x:Name="title" VerticalAlignment="Center" Margin="4,0,0,0" Text="{Binding Path=Title}" Grid.Column="1" TextTrimming="CharacterEllipsis"/>
                <Button x:Name="PART_Close" Margin="8,0,0,0" Grid.Column="2" Visibility="Hidden"
                        Style="{StaticResource Header_Close}" Command="{x:Static command:GlobalCommands.HideStatusCommand}"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="PART_Close" Property="Visibility" Value="Visible"/>
                <Setter Property="Background" Value="{StaticResource MouseOnBackground}"/>
                <Setter TargetName="title" Property="Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter TargetName="PART_Close" Property="Visibility" Value="Visible"/>
                <Setter Property="Background" Value="{StaticResource BorderBrush}"/>
                <Setter TargetName="title" Property="Foreground" Value="#FF717171"/>
            </Trigger>
            <DataTrigger Binding="{Binding IsActive}" Value="True">
                <Setter Property="Background" Value="{StaticResource ActiveHeaderBackground}"/>
                <Setter TargetName="title" Property="Foreground" Value="White"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="DocumentGroupControlNormal" TargetType="{x:Type view:LayoutDocumentGroupControl}">
        <Grid KeyboardNavigation.TabNavigation="Local">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Rectangle x:Name="Rect" Height="2" SnapsToDevicePixels="True" Grid.Row="1" Fill="{StaticResource BorderBrush}"/>
            <Border x:Name="Border" SnapsToDevicePixels="True" UseLayoutRounding="True">
                <Grid SnapsToDevicePixels="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="16"/>
                    </Grid.ColumnDefinitions>
                    <view:DocumentPanel IsItemsHost="True" SnapsToDevicePixels="True" KeyboardNavigation.TabIndex="1"/>
                    <view:CustomToggleButton IsChecked="{Binding RelativeSource={RelativeSource Self},Path=DropContextMenu.IsOpen}" IsThreeState="False" Grid.Column="1" Style="{StaticResource DocumentToggleButtonStyle}">
                        <view:CustomToggleButton.DropContextMenu>
                            <view:OnItemClickMenu ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Model.ChildrenSorted}"/>
                        </view:CustomToggleButton.DropContextMenu>
                    </view:CustomToggleButton>
                </Grid>
            </Border>
            <Border x:Name="ContentPanel" UseLayoutRounding="True"
                                VerticalAlignment="Stretch"
                                HorizontalAlignment="Stretch"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                Grid.Row="2" SnapsToDevicePixels="True"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Cycle">
                <ContentPresenter ContentSource="SelectedContent"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self},Path=Items.Count}" Value="0">
                <Setter Property="Visibility" Value="Hidden"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self},Path=Model.IsActive}" Value="True">
                <Setter TargetName="Rect" Property="Fill" Value="{StaticResource ActiveHeaderBackground}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="DocumentGroupControlDrag" TargetType="{x:Type view:LayoutDocumentGroupControl}">
        <Grid SnapsToDevicePixels="True">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>
            <Border x:Name="Border" SnapsToDevicePixels="True" UseLayoutRounding="True">
                <view:DocumentPanel IsItemsHost="True" KeyboardNavigation.TabIndex="1"/>
            </Border>
            <Border x:Name="ContentPanel" UseLayoutRounding="True"
                                VerticalAlignment="Stretch"
                                HorizontalAlignment="Stretch"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                Grid.Row="1" SnapsToDevicePixels="True"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Cycle">
                <ContentPresenter ContentSource="SelectedContent"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="AnchorSideGroupControlNormal" TargetType="{x:Type view:AnchorSideGroupControl}">
        <Grid KeyboardNavigation.TabNavigation="Local" SnapsToDevicePixels="True">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Border Background="Transparent" UseLayoutRounding="True" Grid.RowSpan="2" SnapsToDevicePixels="True"/>
            <Border x:Name="ContentPanel" UseLayoutRounding="True"
                                VerticalAlignment="Stretch"
                                HorizontalAlignment="Stretch"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2"
                                KeyboardNavigation.TabNavigation="Cycle"
                                SnapsToDevicePixels="True">
                <ContentPresenter ContentSource="SelectedContent"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
            <view:AnchorSidePanel Grid.Row="1" SnapsToDevicePixels="True" x:Name="ItemsHost" Background="{StaticResource WindowBackground}" IsItemsHost="True" KeyboardNavigation.TabIndex="1"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self},Path=Items.Count}" Value="1">
                <Setter TargetName="ItemsHost" Property="Height" Value="0"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="AnchorSideGroupControlDrag" TargetType="{x:Type view:AnchorSideGroupControl}">
        <Border x:Name="ContentPanel"
                VerticalAlignment="Stretch"
                HorizontalAlignment="Stretch" UseLayoutRounding="True"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                KeyboardNavigation.DirectionalNavigation="Contained"
                KeyboardNavigation.TabIndex="2"
                KeyboardNavigation.TabNavigation="Cycle"
                SnapsToDevicePixels="True">
            <Grid KeyboardNavigation.TabNavigation="Local" SnapsToDevicePixels="True">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <ContentPresenter ContentSource="SelectedContent"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                <view:AnchorSidePanel Grid.Row="1" x:Name="ItemsHost" IsItemsHost="True" Background="{StaticResource WindowBackground}" KeyboardNavigation.TabIndex="1"/>
            </Grid>
        </Border>
    </ControlTemplate>

    <Style TargetType="{x:Type view:LayoutDocumentGroupControl}">
        <Setter Property="BorderThickness" Value="1,0,1,1"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Template" Value="{StaticResource DocumentGroupControlNormal}"/>

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type view:DragTabItem}">
                    <Setter Property="MaxWidth" Value="240"/>
                    <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                    <Setter Property="Background" Value="{StaticResource WindowBackground}"/>
                    <Setter Property="Template" Value="{StaticResource DocumentHeaderTemplate}"/>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter Content="{Binding Content}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=IsDraggingFromDock}" Value="True">
                <Setter Property="Template" Value="{StaticResource DocumentGroupControlDrag}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=IsDraggingFromDock}" Value="False">
                <Setter Property="Template" Value="{StaticResource DocumentGroupControlNormal}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type view:AnchorSideGroupControl}">
        <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template" Value="{StaticResource AnchorSideGroupControlNormal}"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type view:DragTabItem}">
                    <Setter Property="Background" Value="{StaticResource WindowBackground}"/>
                    <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type view:DragTabItem}">
                                <Grid SnapsToDevicePixels="True" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch">
                                    <Border Padding="4,2" SnapsToDevicePixels="True" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                        <TextBlock Foreground="{TemplateBinding Foreground}" TextTrimming="CharacterEllipsis" Text="{Binding Title}"/>
                                    </Border>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsSelected" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" Value="{StaticResource ActivePanelItemBackground}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{StaticResource ActiveHeaderBackground}"/>
                            <Setter Property="Background" Value="WhiteSmoke"/>
                            <Setter Property="BorderThickness" Value="1,0,1,1"/>
                            <Setter Property="Margin" Value="0,-1,0,0"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <view:LayoutContentControl Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=IsDraggingFromDock}" Value="True">
                <Setter Property="Template" Value="{StaticResource AnchorSideGroupControlDrag}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="AnchorGroupWindow_Single" TargetType="{x:Type view:AnchorGroupWindow}">
        <Border BorderBrush="{TemplateBinding BorderBrush}" UseLayoutRounding="True"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}">
            <AdornerDecorator>
                <view:TransitioningContentControl IsRandom="True" Content="{TemplateBinding Content}"/>
            </AdornerDecorator>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="AnchorGroupWindow_Multi" TargetType="{x:Type view:AnchorGroupWindow}">
        <Border UseLayoutRounding="True" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
            <Grid SnapsToDevicePixels="True">
                <Grid.RowDefinitions>
                    <RowDefinition Height="32"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <DockPanel>
                    <StackPanel x:Name="Header_Title_Image" DockPanel.Dock="Left" Orientation="Horizontal">
                        <Button VerticalAlignment="Center" Margin="7,0,5,0" Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=DockManager.DockImageSource}"
                                Height="{x:Static SystemParameters.SmallIconHeight}"
                                Width="{x:Static SystemParameters.SmallIconWidth}"
                                WindowChrome.IsHitTestVisibleInChrome="True" IsTabStop="False"
                                Command="{x:Static SystemCommands.ShowSystemMenuCommand}">
                            <Button.Template>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Image Source="{TemplateBinding Content}"/>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>
                        <!--<Image Source="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DockManager.DockImageSource}"/>-->
                        <TextBlock x:Name="Title" Margin="5,0,0,0" VerticalAlignment="Center" FontSize="12" TextTrimming="CharacterEllipsis" Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DockManager.DockTitle}"/>
                    </StackPanel>
                    <StackPanel x:Name="HeaderPanel" DockPanel.Dock="Right" HorizontalAlignment="Right" Orientation="Horizontal">
                        <Button x:Name="Restore_Btn" Visibility="Collapsed" Style="{StaticResource Window_Restore}" Command="{x:Static command:GlobalCommands.RestoreCommand}"/>
                        <Button x:Name="Maximize_Btn" Style="{StaticResource Window_Maximize}" Command="{x:Static command:GlobalCommands.MaximizeCommand}"/>
                        <Button Style="{StaticResource Window_Close}" Command="{x:Static command:GlobalCommands.CloseCommand}"/>
                    </StackPanel>
                </DockPanel>
                <AdornerDecorator Grid.Row="1">
                    <Border>
                        <view:TransitioningContentControl IsRandom="True" Content="{TemplateBinding Content}"/>
                    </Border>
                </AdornerDecorator>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter TargetName="Restore_Btn" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Maximize_Btn" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsActive" Value="False">
                <Setter Property="BorderBrush" Value="#FF8D8D8D"/>
                <Setter TargetName="Title" Property="Foreground" Value="#FFB2B2B2"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type view:DocumentGroupWindow}">
        <Setter Property="BorderBrush" Value="{StaticResource WindowBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{StaticResource WindowBackground}"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome
                    ResizeBorderThickness="6"
                    CaptionHeight="28"
                    CornerRadius="0"
                    GlassFrameThickness="2"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type view:DocumentGroupWindow}">
                    <Border UseLayoutRounding="True" SnapsToDevicePixels="True" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <Grid SnapsToDevicePixels="True">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <DockPanel x:Name="PART_Header" Height="32">
                                <StackPanel DockPanel.Dock="Left" Orientation="Horizontal">
                                    <Button VerticalAlignment="Center" Margin="7,0,5,0" Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=DockManager.DockImageSource}"
                                            Height="{x:Static SystemParameters.SmallIconHeight}"
                                            Width="{x:Static SystemParameters.SmallIconWidth}"
                                            WindowChrome.IsHitTestVisibleInChrome="True" IsTabStop="False"
                                            Command="{x:Static SystemCommands.ShowSystemMenuCommand}">
                                        <Button.Template>
                                            <ControlTemplate TargetType="{x:Type Button}">
                                                <Image Source="{TemplateBinding Content}"/>
                                            </ControlTemplate>
                                        </Button.Template>
                                    </Button>
                                    <!--<Image Source="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DockManager.DockImageSource}"/>-->
                                    <TextBlock x:Name="Title" Margin="5,0,0,0" VerticalAlignment="Center" FontSize="12" TextTrimming="CharacterEllipsis" Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=DockManager.DockTitle}"/>
                                </StackPanel>
                                <StackPanel DockPanel.Dock="Right" HorizontalAlignment="Right" Orientation="Horizontal">
                                    <Button Height="24" Style="{StaticResource Window_Minimize}" Command="{x:Static command:GlobalCommands.MinimizeCommand}"/>
                                    <Button x:Name="Maximize_Btn" Height="24" Style="{StaticResource Window_Maximize}" Command="{x:Static command:GlobalCommands.MaximizeCommand}"/>
                                    <Button x:Name="Restore_Btn" Height="24" Visibility="Collapsed" Style="{StaticResource Window_Restore}" Command="{x:Static command:GlobalCommands.RestoreCommand}"/>
                                    <Button Height="24" Style="{StaticResource Window_Close}" Command="{x:Static command:GlobalCommands.CloseCommand}"/>
                                </StackPanel>
                            </DockPanel>
                            <AdornerDecorator Grid.Row="1">
                                <Border Padding="6,0,6,6">
                                    <ContentPresenter Content="{TemplateBinding Content}"/>
                                </Border>
                            </AdornerDecorator>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="Maximize_Btn" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Restore_Btn" Property="Visibility" Value="Visible"/>
                            <Setter Property="Padding" Value="6"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter Property="BorderBrush" Value="#FF8D8D8D"/>
                            <Setter TargetName="Title" Property="Foreground" Value="#FFB2B2B2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type view:AnchorGroupWindow}">
        <Setter Property="BorderBrush" Value="{StaticResource WindowBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{StaticResource WindowBackground}"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome
                    ResizeBorderThickness="6"
                    CaptionHeight="20"
                    CornerRadius="0"
                    GlassFrameThickness="2"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template" Value="{StaticResource AnchorGroupWindow_Single}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=NoBorder}" Value="True">
                <Setter Property="BorderThickness" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=IsSingleMode}" Value="False">
                <Setter Property="Template" Value="{StaticResource AnchorGroupWindow_Multi}"/>
                <Setter Property="WindowChrome.CaptionHeight" Value="28"/>
            </DataTrigger>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter Property="Padding" Value="6"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ydock:DockManager}">
        <Setter Property="DocumentHeaderTemplate" Value="{StaticResource DocumentHeaderTemplate}"/>
        <Setter Property="Background" Value="{StaticResource WindowBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ydock:DockManager}">
                    <Border UseLayoutRounding="True" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid FlowDirection="LeftToRight">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="5"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="5"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="5"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="5"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Content="{TemplateBinding LayoutRootPanel}" Grid.Column="1" Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="3"/>
                            <ContentPresenter Content="{TemplateBinding RightSide}" Grid.Column="4" Grid.Row="2"/>
                            <ContentPresenter Content="{TemplateBinding LeftSide}" Grid.Column="0" Grid.Row="2"/>
                            <ContentPresenter Content="{TemplateBinding TopSide}" Grid.Column="2" Grid.Row="0"/>
                            <ContentPresenter Content="{TemplateBinding BottomSide}" Grid.Column="2" Grid.Row="4"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>